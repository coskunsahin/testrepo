{"version":3,"sources":["Masterforms.js","App.js","serviceWorker.js","index.js"],"names":["Masterform","props","mainHtml","state","appendHtml","bind","prependHtml","this","type","name","fluid","justify","debug","md","value","selected","id","min","max","push","pull","align","style","height","React","Component","defaultProps","App","className","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.443c951a.chunk.js","sourcesContent":["import React from 'react';\r\nimport { Container, Row, Col } from 'react-grid-system';\r\nclass Masterform extends React.Component {\r\n\r\n    constructor(props) {\r\n      super(props);\r\n      this.mainHtml = [\r\n        <div> main Html </div>\r\n      ];\r\n      this.state = {\r\n        mainHtml:this.mainHtml\r\n      };\r\n      this.appendHtml = this.appendHtml.bind(this);\r\n      this.prependHtml = this.prependHtml.bind(this);\r\n    }\r\n  \r\n    \r\n  \r\n    render() {\r\n      return (\r\n        <div>\r\n         \r\n          {this.state.mainHtml}\r\n\r\n\r\n          <input type=\"text\" name=\"name\" />\r\n\r\n\r\n          <h1>deneme</h1>\r\n       <Container fluid>\r\n  \r\n       <Row justify=\"center\" debug>\r\n        <Col  md={6} debug>\r\n\r\n        <label>\r\n        a</label>\r\n\r\n        \r\n\r\n        </Col>\r\n        <Col  md={6} debug>\r\n\r\n        <label>\r\n        b</label>\r\n\r\n      \r\n\r\n        </Col>\r\n        <Col  md={6} debug>\r\n        <input type=\"text\" name=\"name\" />\r\n\r\n        </Col>\r\n        <Col  md={6} debug>\r\n        <select>\r\n  <option value=\"grapefruit\">Grapefruit</option>\r\n  <option value=\"lime\">Lime</option>\r\n  <option selected value=\"coconut\">Coconut</option>\r\n  <option value=\"mango\">Mango</option>\r\n</select>\r\n        \r\n</Col>\r\n<Col  md={6} debug>\r\n<label>\r\n       c</label>\r\n        </Col>\r\n        <Col  md={6} debug>\r\n\r\n        <label>\r\n        d</label>\r\n\r\n        </Col>\r\n        <Col  md={6} debug>\r\n\r\n        <select>\r\n  <option value=\"grapefruit\">Grapefruit</option>\r\n  <option value=\"lime\">Lime</option>\r\n  <option selected value=\"coconut\">Coconut</option>\r\n  <option value=\"mango\">Mango</option>\r\n</select>\r\n\r\n</Col>\r\n<Col  md={6} debug>\r\n<input type=\"datetime-local\" id=\"meeting-time\"\r\n       name=\"meeting-time\" value=\"2018-06-12T19:30\"\r\n       min=\"2018-06-07T00:00\" max=\"2018-06-14T00:00\"></input>\r\n\r\n\r\n</Col>\r\n\r\n\r\n      </Row>\r\n\r\n\r\n\r\n\r\n\r\n      <Row debug>\r\n    <Col md={9} push={{ md: 3 }} debug>\r\n      \r\n    <input type=\"datetime-local\" id=\"meeting-time\"\r\n       name=\"meeting-time\" value=\"2018-06-12T19:30\"\r\n       min=\"2018-06-07T00:00\" max=\"2018-06-14T00:00\"></input>\r\n\r\n\r\n\r\n\r\n      \r\n        \r\n        </Col>\r\n\r\n\r\n    <Col md={3} pull={{ md: 9 }} debug>    \r\n    \r\n    <label>\r\n        e</label>\r\n\r\n\r\n       \r\n    \r\n    </Col>\r\n  </Row>\r\n\r\n  \r\n  <Row align=\"center\" style={{ height: '75px' }} debug>\r\n    <Col debug>f</Col>\r\n    <Col debug>g</Col>\r\n    <Col debug>h</Col>\r\n    <Col debug>k</Col>\r\n    <Col debug>m</Col>\r\n    <Col debug>  \r\n         </Col>\r\n  \r\n  </Row>\r\n     \r\n      \r\n     \r\n     \r\n  <Row  debug>\r\n     \r\n  <Col debug><select>\r\n  <option value=\"grapefruit\">Grapefruit</option>\r\n  <option value=\"lime\">Lime</option>\r\n  <option selected value=\"coconut\">Coconut</option>\r\n  <option value=\"mango\">Mango</option>\r\n</select></Col>\r\n    <Col debug><select>\r\n  <option value=\"grapefruit\">Grapefruit</option>\r\n  <option value=\"lime\">Lime</option>\r\n  <option selected value=\"coconut\">Coconut</option>\r\n  <option value=\"mango\">Mango</option>\r\n</select></Col>\r\n    <Col debug><select>\r\n  <option value=\"grapefruit\">Grapefruit</option>\r\n  <option value=\"lime\">Lime</option>\r\n  <option selected value=\"coconut\">Coconut</option>\r\n  <option value=\"mango\">Mango</option>\r\n</select></Col>\r\n    <Col debug> <input type=\"text\" name=\"name\" /></Col>\r\n    <Col debug> <input type=\"text\" name=\"name\" /></Col>\r\n     \r\n    <Col debug></Col>\r\n  </Row>\r\n   \r\n \r\n</Container>\r\n \r\n\r\n        </div>\r\n      \r\n      \r\n      \r\n      );\r\n    }\r\n  \r\n  }\r\n  \r\nMasterform.propTypes = {\r\n  }\r\n  \r\nMasterform.defaultProps = {\r\n  }\r\n  \r\n  export default Masterform;","import React from 'react';\n\nimport Masterform from './Masterforms'; \n\n\n\n\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Masterform /> \n    </div>\n    \n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}